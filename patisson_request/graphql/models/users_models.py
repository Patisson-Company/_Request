"""Auto-generated by graphql2python."""

# pylint: disable-all
# mypy: ignore-errors

import enum
import typing as _t
from datetime import date, datetime

from pydantic import BaseModel, Field

__all__ = [
    # "GraphQLBaseModel",
    # scalars
    # "Boolean",
    # "ID",
    # "String",
    # enums
    # unions
    # interfaces
    # objects
    "User",
]

class EmptyField: ...

class GraphQLBaseModel(BaseModel):
    """Base Model for GraphQL object."""

    class Config:
        allow_population_by_name = True
        json_encoders = {
            # custom output conversion for datetime
            datetime: lambda dt: dt.isoformat()
        }
        arbitrary_types_allowed = True 

    def __getattribute__(self, name: str):
        value = super().__getattribute__(name)
        if isinstance(value, EmptyField):
            raise AttributeError(f"The field '{name}' has not been initialized.")
        return value


# The `Boolean` scalar type represents `true` or `false`.
Boolean = str


# The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID
# type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an
# input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
ID = str


# The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most
# often used by GraphQL to represent free-form human-readable text.
String = str


class User(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    id: 'ID' = Field(default=EmptyField())
    role: 'String' = Field(default=EmptyField())
    username: 'String' = Field(default=EmptyField())
    about: _t.Optional['String'] = Field(default=EmptyField())
    avatar: _t.Optional['String'] = Field(default=EmptyField())
    firstName: _t.Optional['String'] = Field(default=EmptyField())
    lastName: _t.Optional['String'] = Field(default=EmptyField())
    typename__: _t.Literal["User"] = Field(default="User", alias="__typename")


class Library(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    id: 'ID' = Field(default=EmptyField())
    user_id: 'String' = Field(default=EmptyField())
    book_id: 'String' = Field(default=EmptyField())
    status: 'String' = Field(default=EmptyField())
    typename__: _t.Literal["Library"] = Field(default="Library", alias="__typename")
    
    
User.update_forward_refs()
