"""Auto-generated by graphql2python."""

# pylint: disable-all
# mypy: ignore-errors

import typing as _t

from pydantic import Field

from patisson_request.graphql.models.base import EmptyField, GraphQLBaseModel

__all__ = [
    # "GraphQLBaseModel",
    # scalars
    # "Boolean",
    # "ID",
    # "String",
    # enums
    # unions
    # interfaces
    # objects
    "User",
]


# The `Boolean` scalar type represents `true` or `false`.
Boolean = str


# The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID
# type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an
# input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
ID = str


# The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most
# often used by GraphQL to represent free-form human-readable text.
String = str


class User(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    id: ID | EmptyField = EmptyField()
    role: String | EmptyField = EmptyField()
    username: String | EmptyField = EmptyField()
    about: _t.Optional['String'] | EmptyField = EmptyField()
    avatar: _t.Optional['String'] | EmptyField = EmptyField()
    firstName: _t.Optional['String'] | EmptyField = EmptyField()
    lastName: _t.Optional['String'] | EmptyField = EmptyField()
    typename__: _t.Literal["User"] = Field(default="User", alias="__typename")


class Library(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    id: ID | EmptyField = EmptyField()
    user_id: String | EmptyField = EmptyField()
    book_id: String | EmptyField = EmptyField()
    status: String | EmptyField = EmptyField()
    typename__: _t.Literal["Library"] = Field(default="Library", alias="__typename")
    
    
User.update_forward_refs()
Library.update_forward_refs()
