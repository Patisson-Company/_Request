"""Auto-generated by graphql2python."""

# pylint: disable-all
# mypy: ignore-errors

import enum
import typing as _t
from datetime import date, datetime

from pydantic import BaseModel, Field

__all__ = [
    # "GraphQLBaseModel",
    # scalars
    # "Boolean",
    # "ID",
    # "Int",
    # "String",
    # enums
    # unions
    # interfaces
    # objects
    "Author",
    "Book",
    "Category",
    "Error",
    "Review",
    "ReviewResponse",
]

class EmptyField: ...

class GraphQLBaseModel(BaseModel):
    """Base Model for GraphQL object."""

    class Config:
        allow_population_by_name = True
        json_encoders = {
            # custom output conversion for datetime
            datetime: lambda dt: dt.isoformat()
        }
        arbitrary_types_allowed = True 

    def __getattribute__(self, name: str):
        value = super().__getattribute__(name)
        if isinstance(value, EmptyField):
            raise AttributeError(f"The field '{name}' has not been initialized.")
        return value
    

# The `Boolean` scalar type represents `true` or `false`.
Boolean = str


# The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID
# type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an
# input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
ID = str


# The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31)
# and 2^31 - 1.
Int = str


# The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most
# often used by GraphQL to represent free-form human-readable text.
String = str


class Author(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    name: 'String' = Field(default=EmptyField())
    books: _t.Optional[_t.List[_t.Optional['Book']]] = Field(default=EmptyField())
    typename__: _t.Literal["Author"] = Field(default="Author", alias="__typename")


class Book(GraphQLBaseModel):         
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    google_id: 'String' = Field(default=EmptyField())
    id: 'String' = Field(default=EmptyField())
    title: 'String' = Field(default=EmptyField())
    authors: _t.Optional[_t.List[_t.Optional['Author']]] = Field(default=EmptyField())
    categories: _t.Optional[_t.List[_t.Optional['Category']]] = Field(default=EmptyField())
    description: _t.Optional['String'] = Field(default=EmptyField())
    language: _t.Optional['String'] = Field(default=EmptyField())
    maturityRating: _t.Optional['String'] = Field(default=EmptyField())
    pageCount: _t.Optional['Int'] = Field(default=EmptyField())
    publishedDate: _t.Optional['String'] = Field(default=EmptyField())
    publisher: _t.Optional['String'] = Field(default=EmptyField())
    smallThumbnail: _t.Optional['String'] = Field(default=EmptyField())
    thumbnail: _t.Optional['String'] = Field(default=EmptyField())
    typename__: _t.Literal["Book"] = Field(default="Book", alias="__typename")


class Category(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    name: 'String' = Field(default=EmptyField())
    books: _t.Optional[_t.List[_t.Optional['Book']]] = Field(default=EmptyField())
    typename__: _t.Literal["Category"] = Field(default="Category", alias="__typename")


class Error(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    error: 'String' = Field(default=EmptyField())
    extra: _t.Optional['String'] = Field(default=EmptyField())
    typename__: _t.Literal["Error"] = Field(default="Error", alias="__typename")


class Review(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    actual: 'Boolean' = Field(default=EmptyField())
    book: 'Book' = Field(default=EmptyField())
    id: 'ID' = Field(default=EmptyField())
    stars: 'Int' = Field(default=EmptyField())
    user_id: 'String' = Field(default=EmptyField())
    comment: _t.Optional['String'] = Field(default=EmptyField())
    typename__: _t.Literal["Review"] = Field(default="Review", alias="__typename")


class ReviewResponse(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    success: 'Boolean' = Field(default=EmptyField())
    errors: _t.Optional[_t.List[_t.Optional['Error']]] = Field(default=EmptyField())
    typename__: _t.Literal["ReviewResponse"] = Field(default="ReviewResponse", alias="__typename")


Author.update_forward_refs()
Book.update_forward_refs()
Category.update_forward_refs()
Error.update_forward_refs()
Review.update_forward_refs()
ReviewResponse.update_forward_refs()
